import TelegramBot from "node-telegram-bot-api";
import { repository } from "../../db/repository";
import { Keyboard } from "../keyboard";
import { parseGooglePlayLinks } from "../../utils/parser";
import { CONFIG } from "../../config";

export class AppLinksCommands {
    private bot: TelegramBot;
    private userStates: Record<string, { action: string; data?: any }> = {};

    constructor(bot: TelegramBot) {
        this.bot = bot;
    }

    registerHandlers() {
        // Handle button clicks
        this.bot.onText(/üìå –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏/, this.handleAddLinks.bind(this));
        this.bot.onText(
            /üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏/,
            this.handleEditLinks.bind(this)
        );
        this.bot.onText(/‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫–∏/, this.handleDeleteLinks.bind(this));

        // Handle message input for adding links
        this.bot.on("message", this.handleUserInput.bind(this));

        // Handle callback queries for editing/deleting links
        this.bot.on("callback_query", this.handleCallbackQuery.bind(this));
    }

    private async handleAddLinks(msg: TelegramBot.Message) {
        const chatId = msg.chat.id.toString();

        // Get user
        const user = await repository.getOrCreateUser(
            chatId,
            msg.chat.username,
            msg.chat.first_name,
            msg.chat.last_name
        );

        // Check if user has reached the maximum number of links
        const userLinks = await repository.getUserAppLinks(user.id);
        if (userLinks.length >= CONFIG.app.maxLinksPerUser) {
            await this.bot.sendMessage(
                chatId,
                `‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ (${CONFIG.app.maxLinksPerUser}). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.`
            );
            return;
        }

        // Set user state
        this.userStates[chatId] = { action: "add_links" };

        await this.bot.sendMessage(
            chatId,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Play (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            { reply_markup: Keyboard.getCancelKeyboard() }
        );
    }

    private async handleEditLinks(msg: TelegramBot.Message) {
        const chatId = msg.chat.id.toString();

        // Get user
        const user = await repository.getOrCreateUser(
            chatId,
            msg.chat.username,
            msg.chat.first_name,
            msg.chat.last_name
        );

        // Get user links
        const links = await repository.getUserAppLinks(user.id);

        if (links.length === 0) {
            await this.bot.sendMessage(
                chatId,
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
            );
            return;
        }

        await this.bot.sendMessage(
            chatId,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            { reply_markup: Keyboard.getLinksKeyboard(links) }
        );
    }

    private async handleDeleteLinks(msg: TelegramBot.Message) {
        const chatId = msg.chat.id.toString();

        // Get user
        const user = await repository.getOrCreateUser(
            chatId,
            msg.chat.username,
            msg.chat.first_name,
            msg.chat.last_name
        );

        // Get user links
        const links = await repository.getUserAppLinks(user.id);

        if (links.length === 0) {
            await this.bot.sendMessage(
                chatId,
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
            );
            return;
        }

        // Set user state
        this.userStates[chatId] = { action: "delete_links" };

        await this.bot.sendMessage(
            chatId,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ:",
            {
                reply_markup: {
                    inline_keyboard: [
                        ...Keyboard.getLinksKeyboard(links).inline_keyboard,
                        [
                            {
                                text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                                callback_data: "delete_all_links",
                            },
                        ],
                    ],
                },
            }
        );
    }

    private async handleUserInput(msg: TelegramBot.Message) {
        if (!msg.text) return;

        const chatId = msg.chat.id.toString();
        const userState = this.userStates[chatId];

        if (!userState) return;

        // Handle cancel action
        if (msg.text === "üîô –û—Ç–º–µ–Ω–∞") {
            delete this.userStates[chatId];
            await this.bot.sendMessage(chatId, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
            return;
        }

        // Handle adding links
        if (userState.action === "add_links") {
            const parsedLinks = parseGooglePlayLinks(msg.text);

            if (parsedLinks.length === 0) {
                await this.bot.sendMessage(
                    chatId,
                    "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ Google Play. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç: https://play.google.com/store/apps/details?id=com.example.app"
                );
                return;
            }

            // Get user
            const user = await repository.getOrCreateUser(
                chatId,
                msg.chat.username,
                msg.chat.first_name,
                msg.chat.last_name
            );

            // Get current links count
            const userLinks = await repository.getUserAppLinks(user.id);
            const availableSlots =
                CONFIG.app.maxLinksPerUser - userLinks.length;

            if (availableSlots <= 0) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ (${CONFIG.app.maxLinksPerUser}). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.`
                );
                return;
            }

            // Add links up to the limit
            const linksToAdd = parsedLinks.slice(0, availableSlots);
            let addedCount = 0;

            for (const link of linksToAdd) {
                try {
                    await repository.addAppLink(
                        user.id,
                        link.url,
                        link.packageName
                    );
                    addedCount++;
                } catch (error) {
                    console.error("Error adding link:", error);
                }
            }

            // Clear user state
            delete this.userStates[chatId];

            await this.bot.sendMessage(
                chatId,
                `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∏–∑ ${parsedLinks.length} —Å—Å—ã–ª–æ–∫.` +
                    (parsedLinks.length > addedCount
                        ? ` –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${CONFIG.app.maxLinksPerUser} —Å—Å—ã–ª–æ–∫.`
                        : ""),
                { reply_markup: Keyboard.getMainKeyboard() }
            );
            return;
        }

        // Handle editing link
        if (userState.action === "edit_link" && userState.data) {
            try {
                const user = await repository.getOrCreateUser(
                    chatId,
                    msg.chat.username,
                    msg.chat.first_name,
                    msg.chat.last_name
                );
                const parsedLinks = parseGooglePlayLinks(msg.text);

                if (parsedLinks.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ Google Play."
                    );
                    return;
                }

                const link = parsedLinks[0];
                await repository.updateAppLink(userState.data.linkId, user.id, {
                    url: link.url,
                    packageName: link.packageName,
                });

                delete this.userStates[chatId];

                await this.bot.sendMessage(
                    chatId,
                    "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: ${error.message}`
                );
            }
        }
    }

    private async handleCallbackQuery(query: TelegramBot.CallbackQuery) {
        if (!query.message || !query.data) return;

        const chatId = query.message.chat.id.toString();

        // Handle link selection for editing
        if (query.data.startsWith("link_")) {
            const linkId = query.data.replace("link_", "");

            try {
                const user = await repository.getOrCreateUser(chatId);
                const links = await repository.getUserAppLinks(user.id);
                const selectedLink = links.find((link) => link.id === linkId);

                if (!selectedLink) {
                    await this.bot.sendMessage(chatId, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    `–í—ã–±—Ä–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: ${selectedLink.packageName}\n` +
                        `URL: ${selectedLink.url}\n\n` +
                        `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                        callback_data: `edit_link_${linkId}`,
                                    },
                                    {
                                        text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                                        callback_data: `confirm_delete_link_${linkId}`,
                                    },
                                ],
                                [
                                    {
                                        text: "üîô –ù–∞–∑–∞–¥",
                                        callback_data: "back_to_links",
                                    },
                                ],
                            ],
                        },
                    }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle edit link action
        else if (query.data.startsWith("edit_link_")) {
            const linkId = query.data.replace("edit_link_", "");

            this.userStates[chatId] = {
                action: "edit_link",
                data: { linkId },
            };

            await this.bot.sendMessage(
                chatId,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
                { reply_markup: Keyboard.getCancelKeyboard() }
            );
        }

        // Handle confirm delete link
        else if (query.data.startsWith("confirm_delete_link_")) {
            const linkId = query.data.replace("confirm_delete_link_", "");

            await this.bot.sendMessage(
                chatId,
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?",
                {
                    reply_markup: Keyboard.getYesNoKeyboard(
                        "delete_link",
                        linkId
                    ),
                }
            );
        }

        // Handle delete link confirmation
        else if (query.data.startsWith("delete_link_yes_")) {
            const linkId = query.data.replace("delete_link_yes_", "");

            try {
                const user = await repository.getOrCreateUser(chatId);
                await repository.deleteAppLink(linkId, user.id);

                await this.bot.sendMessage(
                    chatId,
                    "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: ${error.message}`
                );
            }
        }

        // Handle delete link cancellation
        else if (query.data.startsWith("delete_link_no_")) {
            await this.bot.sendMessage(chatId, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
        }

        // Handle delete all links
        else if (query.data === "delete_all_links") {
            await this.bot.sendMessage(
                chatId,
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Å—ã–ª–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                                    callback_data: "confirm_delete_all_links",
                                },
                                { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" },
                            ],
                        ],
                    },
                }
            );
        }

        // Handle confirm delete all links
        else if (query.data === "confirm_delete_all_links") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const links = await repository.getUserAppLinks(user.id);

                for (const link of links) {
                    await repository.deleteAppLink(link.id, user.id);
                }

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã (${links.length}).`,
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: ${error.message}`
                );
            }
        }

        // Handle back to links list
        else if (query.data === "back_to_links") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const links = await repository.getUserAppLinks(user.id);

                if (links.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    { reply_markup: Keyboard.getLinksKeyboard(links) }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle cancel
        else if (query.data === "cancel") {
            await this.bot.sendMessage(chatId, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
        }

        // Always answer callback query to remove loading state
        await this.bot.answerCallbackQuery(query.id);
    }
}
