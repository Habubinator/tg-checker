import TelegramBot from "node-telegram-bot-api";
import { repository } from "../../db/repository";
import { Keyboard } from "../keyboard";
import { CONFIG } from "../../config";
import { isValidTimeFormat } from "../../utils/parser";

export class SchedulerCommands {
    private bot: TelegramBot;
    private userStates: Record<string, { action: string; data?: any }> = {};

    constructor(bot: TelegramBot) {
        this.bot = bot;
    }

    registerHandlers() {
        // Handle button clicks
        this.bot.onText(
            /‚è∞ –¢–∞–π–º–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–æ–∫/,
            this.handleSchedulerMenu.bind(this)
        );

        // Handle message input for adding schedules
        this.bot.on("message", this.handleUserInput.bind(this));

        // Handle callback queries for editing/deleting schedules
        this.bot.on("callback_query", this.handleCallbackQuery.bind(this));
    }

    private async handleSchedulerMenu(msg: TelegramBot.Message) {
        const chatId = msg.chat.id.toString();

        await this.bot.sendMessage(
            chatId,
            "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫:",
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                                callback_data: "add_schedule",
                            },
                        ],
                        [
                            {
                                text: "üìù –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫",
                                callback_data: "list_schedules",
                            },
                        ],
                        [
                            {
                                text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                callback_data: "delete_schedule",
                            },
                        ],
                    ],
                },
            }
        );
    }

    private async handleUserInput(msg: TelegramBot.Message) {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        if (!msg.text) return;

        const chatId = msg.chat.id.toString();
        const userState = this.userStates[chatId];

        if (!userState) return;

        // Handle cancel action
        if (msg.text === "üîô –û—Ç–º–µ–Ω–∞") {
            delete this.userStates[chatId];
            await this.bot.sendMessage(chatId, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
            return;
        }

        // Handle adding schedule
        if (userState.action === "add_schedule") {
            const time = msg.text.trim();

            if (!isValidTimeFormat(time)) {
                await this.bot.sendMessage(
                    chatId,
                    "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)."
                );
                return;
            }

            // Get user
            const user = await repository.getOrCreateUser(
                chatId,
                msg.chat.username,
                msg.chat.first_name,
                msg.chat.last_name
            );

            // Get current schedules count
            const userSchedules = await repository.getUserCheckSchedules(
                user.id
            );

            if (userSchedules.length >= CONFIG.app.maxSchedulesPerUser) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (${CONFIG.app.maxSchedulesPerUser}). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.`
                );
                return;
            }

            // Check if this time already exists
            const existingSchedule = userSchedules.find(
                (schedule) => schedule.time === time
            );

            if (existingSchedule) {
                await this.bot.sendMessage(
                    chatId,
                    "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                );
                return;
            }

            // Add schedule
            try {
                await repository.addCheckSchedule(user.id, time);
                delete this.userStates[chatId];

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${time} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.`,
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`
                );
            }
        }

        // Handle editing schedule
        else if (userState.action === "edit_schedule" && userState.data) {
            const time = msg.text.trim();

            if (!isValidTimeFormat(time)) {
                await this.bot.sendMessage(
                    chatId,
                    "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)."
                );
                return;
            }

            try {
                const user = await repository.getOrCreateUser(chatId);

                // Check if this time already exists
                const userSchedules = await repository.getUserCheckSchedules(
                    user.id
                );
                const existingSchedule = userSchedules.find(
                    (schedule) =>
                        schedule.time === time &&
                        schedule.id !== userState.data.scheduleId
                );

                if (existingSchedule) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                    );
                    return;
                }

                await repository.updateCheckSchedule(
                    userState.data.scheduleId,
                    user.id,
                    {
                        time,
                    }
                );

                delete this.userStates[chatId];

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${time}.`,
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`
                );
            }
        }
    }

    private async handleCallbackQuery(query: TelegramBot.CallbackQuery) {
        if (!query.message || !query.data) return;

        const chatId = query.message.chat.id.toString();

        // Handle add schedule
        if (query.data === "add_schedule") {
            this.userStates[chatId] = { action: "add_schedule" };

            await this.bot.sendMessage(
                chatId,
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                { reply_markup: Keyboard.getCancelKeyboard() }
            );
        }

        // Handle list schedules
        else if (query.data === "list_schedules") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                if (schedules.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                const scheduleList = schedules
                    .map(
                        (schedule) =>
                            `${schedule.isActive ? "‚úÖ" : "‚ùå"} ${
                                schedule.time
                            }`
                    )
                    .join("\n");

                await this.bot.sendMessage(
                    chatId,
                    `üìã –í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫:\n\n${scheduleList}`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                        callback_data: "edit_schedule_list",
                                    },
                                ],
                                [
                                    {
                                        text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
                                        callback_data: "back_to_main",
                                    },
                                ],
                            ],
                        },
                    }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle edit schedule list
        else if (query.data === "edit_schedule_list") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                if (schedules.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    { reply_markup: Keyboard.getSchedulesKeyboard(schedules) }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle delete schedule
        else if (query.data === "delete_schedule") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                if (schedules.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ:",
                    {
                        reply_markup: {
                            inline_keyboard: [
                                ...Keyboard.getSchedulesKeyboard(schedules)
                                    .inline_keyboard,
                                [
                                    {
                                        text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                                        callback_data: "delete_all_schedules",
                                    },
                                ],
                            ],
                        },
                    }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle schedule selection
        else if (query.data.startsWith("schedule_")) {
            const scheduleId = query.data.replace("schedule_", "");

            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );
                const selectedSchedule = schedules.find(
                    (s) => s.id === scheduleId
                );

                if (!selectedSchedule) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    `–í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${selectedSchedule.time}\n` +
                        `–°—Ç–∞—Ç—É—Å: ${
                            selectedSchedule.isActive ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
                        }\n\n` +
                        `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                                        callback_data: `edit_schedule_time_${scheduleId}`,
                                    },
                                    {
                                        text: selectedSchedule.isActive
                                            ? "‚è∏ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                                            : "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                                        callback_data: `toggle_schedule_${scheduleId}`,
                                    },
                                ],
                                [
                                    {
                                        text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                                        callback_data: `confirm_delete_schedule_${scheduleId}`,
                                    },
                                    {
                                        text: "üîô –ù–∞–∑–∞–¥",
                                        callback_data: "back_to_schedules",
                                    },
                                ],
                            ],
                        },
                    }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle edit schedule time
        else if (query.data.startsWith("edit_schedule_time_")) {
            const scheduleId = query.data.replace("edit_schedule_time_", "");

            this.userStates[chatId] = {
                action: "edit_schedule",
                data: { scheduleId },
            };

            await this.bot.sendMessage(
                chatId,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                { reply_markup: Keyboard.getCancelKeyboard() }
            );
        }

        // Handle toggle schedule
        else if (query.data.startsWith("toggle_schedule_")) {
            const scheduleId = query.data.replace("toggle_schedule_", "");

            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );
                const selectedSchedule = schedules.find(
                    (s) => s.id === scheduleId
                );

                if (!selectedSchedule) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    );
                    return;
                }

                await repository.updateCheckSchedule(scheduleId, user.id, {
                    isActive: !selectedSchedule.isActive,
                });

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${selectedSchedule.time} ${
                        selectedSchedule.isActive
                            ? "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                            : "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                    }.`,
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle confirm delete schedule
        else if (query.data.startsWith("confirm_delete_schedule_")) {
            const scheduleId = query.data.replace(
                "confirm_delete_schedule_",
                ""
            );

            await this.bot.sendMessage(
                chatId,
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                {
                    reply_markup: Keyboard.getYesNoKeyboard(
                        "delete_schedule",
                        scheduleId
                    ),
                }
            );
        }

        // Handle delete schedule confirmation
        else if (query.data.startsWith("delete_schedule_yes_")) {
            const scheduleId = query.data.replace("delete_schedule_yes_", "");

            try {
                const user = await repository.getOrCreateUser(chatId);
                await repository.deleteCheckSchedule(scheduleId, user.id);

                await this.bot.sendMessage(
                    chatId,
                    "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${error.message}`
                );
            }
        }

        // Handle delete schedule cancellation
        else if (query.data.startsWith("delete_schedule_no_")) {
            await this.bot.sendMessage(chatId, "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
        }

        // Handle delete all schedules
        else if (query.data === "delete_all_schedules") {
            await this.bot.sendMessage(
                chatId,
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ",
                                    callback_data:
                                        "confirm_delete_all_schedules",
                                },
                                { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" },
                            ],
                        ],
                    },
                }
            );
        }

        // Handle confirm delete all schedules
        else if (query.data === "confirm_delete_all_schedules") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                for (const schedule of schedules) {
                    await repository.deleteCheckSchedule(schedule.id, user.id);
                }

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã (${schedules.length}).`,
                    { reply_markup: Keyboard.getMainKeyboard() }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: ${error.message}`
                );
            }
        }

        // Handle back to main menu
        else if (query.data === "back_to_main") {
            await this.bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
                reply_markup: Keyboard.getMainKeyboard(),
            });
        }

        // Handle back to schedules list
        else if (query.data.startsWith("schedules_page_")) {
            const schedulePage = query.data.replace("schedules_page_", "");
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                if (schedules.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    {
                        reply_markup: Keyboard.getSchedulesKeyboard(
                            schedules,
                            +schedulePage
                        ),
                    }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Handle pagination
        else if (query.data === "back_to_schedules") {
            try {
                const user = await repository.getOrCreateUser(chatId);
                const schedules = await repository.getUserCheckSchedules(
                    user.id
                );

                if (schedules.length === 0) {
                    await this.bot.sendMessage(
                        chatId,
                        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫.",
                        { reply_markup: Keyboard.getMainKeyboard() }
                    );
                    return;
                }

                await this.bot.sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    { reply_markup: Keyboard.getSchedulesKeyboard(schedules) }
                );
            } catch (error) {
                await this.bot.sendMessage(
                    chatId,
                    `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
                );
            }
        }

        // Always answer callback query to remove loading state
        await this.bot.answerCallbackQuery(query.id);
    }
}
