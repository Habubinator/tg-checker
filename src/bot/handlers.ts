import TelegramBot from "node-telegram-bot-api";
import { AppLinksCommands } from "./commands/appLinks";
import { ProxyCommands } from "./commands/proxy";
import { SchedulerCommands } from "./commands/scheduler";
import { CheckCommands } from "./commands/check";
import { Keyboard } from "./keyboard";
import { repository } from "../db/repository";

export class BotHandlers {
    private bot: TelegramBot;
    private appLinksCommands: AppLinksCommands;
    private proxyCommands: ProxyCommands;
    private schedulerCommands: SchedulerCommands;
    private checkCommands: CheckCommands;

    constructor(bot: TelegramBot) {
        this.bot = bot;
        this.bot.setMyCommands([
            {
                command: "/start",
                description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            },
            {
                command: "/help",
                description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            },
            {
                command: "/add",
                description: "–î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞",
            },
            {
                command: "/delete",
                description: "–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞",
            },
        ]);
        this.appLinksCommands = new AppLinksCommands(bot);
        this.proxyCommands = new ProxyCommands(bot);
        this.schedulerCommands = new SchedulerCommands(bot);
        this.checkCommands = new CheckCommands(bot);
    }

    /**
     * Register all command handlers for the bot
     */
    public registerHandlers(): void {
        // Register command-specific handlers
        this.appLinksCommands.registerHandlers();
        this.proxyCommands.registerHandlers();
        this.schedulerCommands.registerHandlers();
        this.checkCommands.registerHandlers();

        // Register global commands
        this.registerGlobalCommands();
    }

    /**
     * Register global commands for the bot
     */
    private registerGlobalCommands(): void {
        // Start command
        this.bot.onText(/\/start/, this.handleStart.bind(this));

        // Help command
        this.bot.onText(/\/help/, this.handleHelp.bind(this));

        // Add command
        this.bot.onText(/\/add (.+)/, this.handleAdd.bind(this));
        this.bot.onText(/\/add$/, this.handleAdd.bind(this));

        // Delete command
        this.bot.onText(/\/delete (.+)/, this.handleDelete.bind(this));
        this.bot.onText(/\/delete$/, this.handleDelete.bind(this));

        // Status check
        this.bot.onText(
            /üîÑ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏/,
            this.handleStatusCheck.bind(this)
        );
    }

    /**
     * Handle the /start command
     * @param msg - Telegram message
     */
    private async handleStart(msg: TelegramBot.Message): Promise<void> {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        const chatId = msg.chat.id.toString();

        // Create or get user
        await repository.getOrCreateUser(
            chatId,
            msg.chat.username,
            msg.chat.first_name,
            msg.chat.last_name
        );

        const welcomeMessage =
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Google Play Checker Bot!\n\n" +
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ Google Play.\n\n" +
            "üîπ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n" +
            "1. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n" +
            "2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n" +
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";

        await this.bot.sendMessage(chatId, welcomeMessage, {
            reply_markup: Keyboard.getMainKeyboard(),
            parse_mode: "Markdown",
        });
    }

    /**
     * Handle the /help command
     * @param msg - Telegram message
     */
    private async handleHelp(msg: TelegramBot.Message): Promise<void> {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        const chatId = msg.chat.id.toString();

        const helpMessage =
            "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n" +
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
            "üìå *–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏* - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Play\n" +
            "üìã *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n" +
            "‚ùå *–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫–∏* - —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–ª–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫\n\n" +
            "üîå *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏* - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ip:port –∏–ª–∏ ip:port:user:pass\n" +
            "‚öôÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏* - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏\n" +
            "üóëÔ∏è *–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏* - —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏\n\n" +
            "‚è∞ *–¢–∞–π–º–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–æ–∫* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫\n" +
            "üîç *–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É* - –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n" +
            "üîÑ *–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n" +
            "*/start* - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" +
            "*/help* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ";

        await this.bot.sendMessage(chatId, helpMessage, {
            parse_mode: "Markdown",
        });
    }

    /**
     * Handle the status check button
     * @param msg - Telegram message
     */
    private async handleStatusCheck(msg: TelegramBot.Message): Promise<void> {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        const chatId = msg.chat.id.toString();

        try {
            // Get user
            const user = await repository.getOrCreateUser(
                chatId,
                msg.chat.username,
                msg.chat.first_name,
                msg.chat.last_name
            );

            // Get latest check results
            const results = await repository.getLatestCheckResults(user.id);

            if (results.length === 0) {
                await this.bot.sendMessage(
                    chatId,
                    "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
                );
                return;
            }

            // Format results
            const latestCheckTime = results[0].checkTime;
            const formattedDate = latestCheckTime.toLocaleString("ru-RU");

            let statusMessage = `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç ${formattedDate}*\n\n`;

            const available = results.filter((r) => r.isAvailable).length;
            const unavailable = results.length - available;

            statusMessage += `‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${available}\n`;
            statusMessage += `‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${unavailable}\n\n`;

            // List all results
            for (const result of results) {
                statusMessage += result.isAvailable
                    ? `‚úÖ ${result.appLink.packageName} ‚Äî –î–æ—Å—Ç—É–ø–Ω–æ\n`
                    : `‚ùå ${result.appLink.packageName} ‚Äî ${
                          result.errorMessage || "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                      }\n`;
            }

            await this.bot.sendMessage(chatId, statusMessage, {
                parse_mode: "Markdown",
            });
        } catch (error) {
            console.error("Error in status check:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
            );
        }
    }

    private async handleAdd(
        msg: TelegramBot.Message,
        match: RegExpExecArray | null
    ): Promise<void> {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        const chatId = msg.chat.id.toString();

        if (!match || !match[1]) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username. –ü—Ä–∏–º–µ—Ä: /add username"
            );
            return;
        }

        const usernameToAdd = match[1].trim();

        try {
            await repository.addApprovedUser(usernameToAdd);
            await this.bot.sendMessage(
                chatId,
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameToAdd} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            );
        }
    }

    private async handleDelete(
        msg: TelegramBot.Message,
        match: RegExpExecArray | null
    ): Promise<void> {
        if (!(await repository.isUserPermitted(msg.from.username))) {
            return;
        }
        const chatId = msg.chat.id.toString();

        if (!match || !match[1]) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete username"
            );
            return;
        }

        const usernameToDelete = match[1].trim();

        try {
            await repository.removeApprovedUser(usernameToDelete);
            await this.bot.sendMessage(
                chatId,
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${usernameToDelete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            );
        }
    }
}
